NumMutant,MutatorType,Result,MutantSourceFile,MutantSource,MutantDestination,MutantSourceLine,MutantSourceColumn,file,mutation_score,Notes,isCondElseToFalse
116.0,RC-cond->true,passed,./2234-grading/Assignment8/shuffled-04/text,"(cond ((not (NumV? size)) (error (quote interp-prim) \""VVQS: arr called with size not a num ~e\"" size)) ((not (NumV? default)) (error (quote interp-prim) \""VVQS: arr called with default not a num ~e\"" default)) ((not (exact-integer? (NumV-num size))) (error...","(cond ((not (NumV? size)) (error (quote interp-prim) \""VVQS: arr called with size not a num ~e\"" size)) ((not (NumV? default)) (error (quote interp-prim) \""VVQS: arr called with default not a num ~e\"" default)) ((not (exact-integer? (NumV-num size))) (error...",670.0,40.0,./2234-grading/Assignment8/shuffled-04/text.rkt,0.864322,"Equiv, uncaught else to true",False
63.0,RC-cond->true,passed,./2234-grading/Assignment4/shuffled-21/text,"(cond ((empty? funs) (error (quote VVQS) \""reference to undefined function: ~e\"" name)) ((cons? funs) (if (equal? name (fdC-name (first funs))) (first funs) (get-fundef name (rest funs)))))","(cond ((empty? funs) (error (quote VVQS) \""reference to undefined function: ~e\"" name)) (#t (if (equal? name (fdC-name (first funs))) (first funs) (get-fundef name (rest funs)))))",199.0,2.0,./2234-grading/Assignment4/shuffled-21/text.rkt,0.882353,"True mutant, student does not have an else branch for the cond, and also does not pass a non cons element from the test cases",False
128.0,RC-cond->false,passed,./2234-grading/Assignment8/shuffled-39/text,(cond ((symbol=? s (Binding-name b)) (Binding-val b)) (else (env-lookup s rst))),(cond (#f (Binding-val b)) (else (env-lookup s rst))),522.0,5.0,./2234-grading/Assignment8/shuffled-39/text.rkt,0.242647,"True mutant, forces the else branch to be run, students test cases never actually look anything up? I'm a little confused on this one.",False
5.0,RC-and->false,passed,./2234-grading/Assignment4/shuffled-35/text,(and (equal? op (quote /)) (equal? val2 0)),(and (equal? op (quote /)) #f),106.0,11.0,./2234-grading/Assignment4/shuffled-35/text.rkt,0.8875,"True mutant, checks for division by 0 but we replace the check with 0 to be false, so it will pass it to the binop-func function, the students test cases must check that it does in fact raise an exception, but not the one they are providing, Racket would provide it",False
17.0,RC-cond->true,passed,./2234-grading/Assignment4/shuffled-11/text,"(cond ((empty? fds) (error (quote get-fundef) \""VVQS: Function Definition List is Empty\"")) ((cons? fds) (cond ((equal? n (FunDefC-name (first fds))) (first fds)) (else (get-fundef n (rest fds))))))","(cond ((empty? fds) (error (quote get-fundef) \""VVQS: Function Definition List is Empty\"")) (#t (cond ((equal? n (FunDefC-name (first fds))) (first fds)) (else (get-fundef n (rest fds))))))",123.0,2.0,./2234-grading/Assignment4/shuffled-11/text.rkt,0.742268,"True mutant, student doesn't have an else branch, so when we force the second one that's what the student is already expecting. ",False
61.0,RC-match-removal,passed,/Users/charlieray/Desktop/Research/RacketCode/JCCR/./2234-grading/Assignment8/shuffled-44/text.rkt,(match expr ((NumC n) (NumV n)) ((StrC s) (StrV s)) ((IfC do? test else?) (define test-result (interp test env)) (match test-result ((BoolV #t) (interp do? env)) ((BoolV #f) (interp else? env)) (else (error (quote interp) VVQS: Test expression in if must return a boolean)))) ((LamC args arg-types body) (CloV args body env)) ((IdC id) (let ((bindval (lookup id env))) (match bindval ((box val) val)))) ((AppC fun args) (define func-val (interp fun env)) (define arg-values (map (λ (arg) (interp (cast arg ExprC) env)) args)) (match func-val ((CloV params body closure-env) (if (= (length params) (length arg-values)) (let ((extended-env (append (map (λ ((param : Symbol) (arg : ValV)) (bind param (box arg))) params arg-values) closure-env))) (interp body extended-env)) (error (quote interp) (format VVQS: Wrong number of arguments in application)))) ((PrimV name arity) (if (= arity (length arg-values)) (apply-prim func-val arg-values env) (error (quote interp) (format VVQS: Wrong number of arguments for primitive ~a name)))) (else (error (quote interp) VVQS: Attempted to apply non-function value)))) ((SetC id val) (let ((bindval (lookup id env))) (match bindval ((box _) (begin (set-box! bindval (interp val env)) (VoidV)))))) ((BegC exps) (match exps ((quote ()) (VoidV)) ((cons _ _) (let ((values (map (λ ((e : ExprC)) (interp e env)) exps))) (if (empty? values) (VoidV) (let ((last-value (car (reverse values)))) (match last-value ((VoidV) (NumV 0)) (else last-value)))))))) ((ArrC exps) (define values (map (λ ((e : ExprC)) : ValV (interp e env)) exps)) (if (andmap (λ ((v : ValV)) (NumV? v)) values) (ArrV (list->vector values)) (error (quote interp) VVQS: All elements of an array must be numbers))) ((RecC id args arg-types body type in) (define junk-box : (Boxof ValV) (box (VoidV))) (define new-env (append (list (bind id junk-box)) env)) (define closure (CloV args body new-env)) (set-box! junk-box closure) (interp in new-env))),(match expr ((NumC n) (NumV n)) ((StrC s) (StrV s)) ((IfC do? test else?) (define test-result (interp test env)) (match test-result ((BoolV #t) (interp do? env)) ((BoolV #f) (interp else? env)) (else (error (quote interp) VVQS: Test expression in if must return a boolean)))) ((LamC args arg-types body) (CloV args body env)) ((IdC id) (let ((bindval (lookup id env))) (match bindval ((box val) val)))) ((AppC fun args) (define func-val (interp fun env)) (define arg-values (map (λ (arg) (interp (cast arg ExprC) env)) args)) (match func-val ((CloV params body closure-env) (if (= (length params) (length arg-values)) (let ((extended-env (append (map (λ ((param : Symbol) (arg : ValV)) (bind param (box arg))) params arg-values) closure-env))) (interp body extended-env)) (error (quote interp) (format VVQS: Wrong number of arguments in application)))) ((PrimV name arity) (if (= arity (length arg-values)) (apply-prim func-val arg-values env) (error (quote interp) (format VVQS: Wrong number of arguments for primitive ~a name)))) (else (error (quote interp) VVQS: Attempted to apply non-function value)))) ((SetC id val) (let ((bindval (lookup id env))) (match bindval ((box _) (begin (set-box! bindval (interp val env)) (VoidV)))))) ((BegC exps) (match exps ((quote ()) (VoidV)) ((cons _ _) (let ((values (map (λ ((e : ExprC)) (interp e env)) exps))) (if (empty? values) (VoidV) (let ((last-value (car (reverse values)))) (match last-value ((VoidV) (NumV 0)) (else last-value)))))))) ((ArrC exps) (define values (map (λ ((e : ExprC)) : ValV (interp e env)) exps)) (if (andmap (λ ((v : ValV)) (NumV? v)) values) (ArrV (list->vector values)) (error (quote interp) VVQS: All elements of an array must be numbers)))),302.0,2.0,./2234-grading/Assignment8/shuffled-44/text.rkt,0.419048,"True mutant, RecC branch is removed, I don't know what that does but tests don't check it somehow",False
26.0,RC-or->false,passed,./2234-grading/Assignment5/shuffled-48/text,(or (quote =>) (quote :=) (quote where) (quote if) (quote then) (quote else)),(or (quote =>) (quote :=) #f (quote if) (quote then) (quote else)),141.0,5.0,./2234-grading/Assignment5/shuffled-48/text.rkt,0.694444,"True mutant, never checks specifically for where being a keyword",False
23.0,RC-cond->true,passed,./2234-grading/Assignment3/shuffled-12/text,(cond ((real? s) (numC s)) ((legal-id? s) (idC s)) ((list? s) (match s ((list (? symbol? a) b c) (binop (idC a) (parse b) (parse c))) ((list (? legal-id? a) b) (appC a (parse b))) ((list (quote leq0?) b (quote then) d (quote else) f) (leq0? (parse b) (p...,(cond ((real? s) (numC s)) ((legal-id? s) (idC s)) ((list? s) (match s ((list (? symbol? a) b c) (binop (idC a) (parse b) (parse c))) ((list (? legal-id? a) b) (appC a (parse b))) ((list (quote leq0?) b (quote then) d (quote else) f) (leq0? (parse b) (p...,78.0,2.0,./2234-grading/Assignment3/shuffled-12/text.rkt,0.818182,"Equiv, uncaught else to true error",False
57.0,RC-cond->true,passed,./2234-grading/Assignment4BasicMastery/shuffled-01/text,"(cond ((empty? funs) (error (quote VVQS) \""reference to undefined function: ~e\"" (quote main))) ((cons? funs) (if (equal? (quote main) (fdC-name (first funs))) (first funs) (get-fundef (quote main) (rest funs)))))","(cond ((empty? funs) (error (quote VVQS) \""reference to undefined function: ~e\"" (quote main))) (#t (if (equal? (quote main) (fdC-name (first funs))) (first funs) (get-fundef (quote main) (rest funs)))))",182.0,2.0,./2234-grading/Assignment4BasicMastery/shuffled-01/text.rkt,0.882353,"True mutant, forces the second branch, which is also the last as there is no else, thus that's what the student expects",False
181.0,RC-and->true,passed,./2234-grading/Assignment8/shuffled-42/text,(and (symbol=? primOp (quote substring)) (StrV? x) (NumV? y) (NumV? z) (integer? (NumV-n y)) (integer? (NumV-n z)) (>= (NumV-n y) 0) (<= (NumV-n y) (string-length (StrV-s x))) (>= (NumV-n y) 0) (<= (NumV-n z) (string-length (StrV-s x))) (<= (NumV-n y) (...,(and (symbol=? primOp (quote substring)) (StrV? x) (NumV? y) (NumV? z) (integer? (NumV-n y)) (integer? (NumV-n z)) #t (<= (NumV-n y) (string-length (StrV-s x))) (>= (NumV-n y) 0) (<= (NumV-n z) (string-length (StrV-s x))) (<= (NumV-n y) (NumV-n z))),136.0,21.0,./2234-grading/Assignment8/shuffled-42/text.rkt,0.804082,"True mutant, tests don't not pass a negative y ",False
56.0,RC-match-removal,passed,/Users/charlieray/Desktop/Research/RacketCode/JCCR/./2234-grading/Assignment5/shuffled-28/text.rkt,(match l ((list (? real? a) (? real? b)) (equal? a b)) ((list (? boolean? a) (? boolean? b)) (equal? a b)) ((list (? string? a) (? string? b)) (equal? a b)) ((list a b) #f)),(match l ((list (? real? a) (? real? b)) (equal? a b)) ((list (? boolean? a) (? boolean? b)) (equal? a b)) ((list a b) #f)),167.0,13.0,./2234-grading/Assignment5/shuffled-28/text.rkt,0.984615,"True mutant, removes the check for a and b being strings.",False
58.0,RC-cond->false,passed,./2234-grading/Assignment2/shuffled-81/text,(cond ((equal? value symbol) replacement) ((and (Leaf? left) (Leaf? right)) (Node value (Leaf) (Leaf))) ((Leaf? left) (Node value (Leaf) (subst right symbol replacement))) ((Leaf? right) (Node value (subst left symbol replacement) (Leaf))) (else (let ((...,(cond ((equal? value symbol) replacement) ((and (Leaf? left) (Leaf? right)) (Node value (Leaf) (Leaf))) (#f (Node value (Leaf) (subst right symbol replacement))) ((Leaf? right) (Node value (subst left symbol replacement) (Leaf))) (else (let ((replaced_l...,200.0,29.0,./2234-grading/Assignment2/shuffled-81/text.rkt,0.9,"True mutant, forces left child to not be a leaf, the comments in the file also state that the condition is not necessary.",False
117.0,RC-or->false,passed,./2234-grading/Assignment8/shuffled-11/text,(or (symbol=? s (quote where)) (symbol=? s (quote if)) (symbol=? s (quote =>)) (symbol=? s (quote letrec)) (symbol=? s (quote :=)) (symbol=? s (quote then)) (symbol=? s (quote <-)) (symbol=? s (quote ->)) (symbol=? s (quote :)) (symbol=? s (quote begin)...,(or (symbol=? s (quote where)) (symbol=? s (quote if)) (symbol=? s (quote =>)) (symbol=? s (quote letrec)) (symbol=? s (quote :=)) #f (symbol=? s (quote <-)) (symbol=? s (quote ->)) (symbol=? s (quote :)) (symbol=? s (quote begin)) (symbol=? s (quote ma...,332.0,5.0,./2234-grading/Assignment8/shuffled-11/text.rkt,0.805882,"True mutant, never checks if := is a valid symbol",False
52.0,RC-match-removal,passed,/Users/charlieray/Desktop/Research/RacketCode/JCCR/./2234-grading/Assignment8/shuffled-39/text.rkt,(match s ((quote +) (numV (+ (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote *) (numV (* (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote /) (numV (/ (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote -) (numV (- (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote <=) (boolV (<= (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote str-eq?) (boolV (equal? (list-ref ops 0) (list-ref ops 1)))) ((quote num-eq?) (boolV (equal? (list-ref ops 0) (list-ref ops 1)))) ((quote arr) (define a1 (numV-n (cast (list-ref ops 0) numV))) (define a2 (numV-n (cast (list-ref ops 1) numV))) (cond ((and (integer? a1) (integer? a2)) (arrV (make-vector (cast a1 Integer) (cast a2 Integer)))))) ((quote arr-ref) (define arr (cast (car ops) arrV)) (define idx (cast (cdr ops) numV)) (cond ((integer? idx) (numV (vector-ref (arrV-vals arr) (cast idx Integer)))) (else (error (quote VVQS) Not a valid integer index)))) (other (error (quote VVQS) Not a valid primitive))),(match s ((quote +) (numV (+ (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote /) (numV (/ (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote -) (numV (- (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote <=) (boolV (<= (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote str-eq?) (boolV (equal? (list-ref ops 0) (list-ref ops 1)))) ((quote num-eq?) (boolV (equal? (list-ref ops 0) (list-ref ops 1)))) ((quote arr) (define a1 (numV-n (cast (list-ref ops 0) numV))) (define a2 (numV-n (cast (list-ref ops 1) numV))) (cond ((and (integer? a1) (integer? a2)) (arrV (make-vector (cast a1 Integer) (cast a2 Integer)))))) ((quote arr-ref) (define arr (cast (car ops) arrV)) (define idx (cast (cdr ops) numV)) (cond ((integer? idx) (numV (vector-ref (arrV-vals arr) (cast idx Integer)))) (else (error (quote VVQS) Not a valid integer index)))) (other (error (quote VVQS) Not a valid primitive))),366.0,5.0,./2234-grading/Assignment8/shuffled-39/text.rkt,,"True mutant, this removes the * branch, indicating that the students test cases never multiply two numbers together, I don't know how that passed branch coverage. Maybe the student branch covered this by testing for an exception, and then when the exception was raised for not having multiplication the test still passed?",False
37.0,RC-or->false,passed,./2234-grading/Assignment4/shuffled-11/text,(or (equal? s (quote +)) (equal? s (quote *)) (equal? s (quote -)) (equal? s (quote /)) (equal? s (quote def)) (equal? s (quote leq0?))),(or (equal? s (quote +)) (equal? s (quote *)) (equal? s (quote -)) (equal? s (quote /)) (equal? s (quote def)) #f),149.0,8.0,./2234-grading/Assignment4/shuffled-11/text.rkt,0.742268,"True mutant, tests don't check if leq0? is in the right ""symbol position""",False
4.0,RC-if->false,passed,./2234-grading/Assignment8/shuffled-44/text,(if (symbol=? for name) val (lookup for rest-env)),(if #f val (lookup for rest-env)),145.0,5.0,./2234-grading/Assignment8/shuffled-44/text.rkt,0.696429,"True mutant, this if will force the error that the name was never found in the environment,  also worth noting that replacing the condition with #t was also a mutant that survived",False
113.0,RC-or->false,passed,./2234-grading/Assignment8/shuffled-11/text,(or (symbol=? s (quote where)) (symbol=? s (quote if)) (symbol=? s (quote =>)) (symbol=? s (quote letrec)) (symbol=? s (quote :=)) (symbol=? s (quote then)) (symbol=? s (quote <-)) (symbol=? s (quote ->)) (symbol=? s (quote :)) (symbol=? s (quote begin)...,(or (symbol=? s (quote where)) #f (symbol=? s (quote =>)) (symbol=? s (quote letrec)) (symbol=? s (quote :=)) (symbol=? s (quote then)) (symbol=? s (quote <-)) (symbol=? s (quote ->)) (symbol=? s (quote :)) (symbol=? s (quote begin)) (symbol=? s (quote ...,332.0,5.0,./2234-grading/Assignment8/shuffled-11/text.rkt,0.805882,True mutant tests never check if if is a valid symbol,False
2.0,RC-match-removal,passed,/Users/charlieray/Desktop/Research/RacketCode/JCCR/./2234-grading/Assignment8/shuffled-44/text.rkt,(match sexp ((? symbol? (? ValidSymbol? sym)) (case sym ((quote num) (NumT)) ((quote bool) (BoolT)) ((quote str) (StrT)) ((quote void) (VoidT)) ((quote numarray) (ArrT)) (else (error (quote parse-type) (format VVQS: Invalid type: ~a sym))))) ((list arg-types ... (quote ->) result-type) (FunT (parse-types (cast arg-types (Listof Sexp))) (parse-type result-type))) (else (error (quote parse-type) (format VVQS: Invalid type: ~a sexp)))),(match sexp ((? symbol? (? ValidSymbol? sym)) (case sym ((quote num) (NumT)) ((quote bool) (BoolT)) ((quote str) (StrT)) ((quote void) (VoidT)) ((quote numarray) (ArrT)) (else (error (quote parse-type) (format VVQS: Invalid type: ~a sym))))) ((list arg-types ... (quote ->) result-type) (FunT (parse-types (cast arg-types (Listof Sexp))) (parse-type result-type)))),99.0,2.0,./2234-grading/Assignment8/shuffled-44/text.rkt,0.419048,"True mutant, this removes the else branch, which now would never error for an invalid type",False
88.0,RC-cond->true,passed,./2234-grading/Assignment8/shuffled-39/text,"(cond ((cmp-to-list op (quote (/ + - * <=))) (cond ((and (symbol=? op (quote /)) (= 0 (numV-n (cast (list-ref ops 1) numV)))) (error (quote VVQS) \""Can not divide by zero\"")) (else (compute-prim op ops)))) (else (define lhop (list-ref ops 0)) (define rhop...","(cond (#t (cond ((and (symbol=? op (quote /)) (= 0 (numV-n (cast (list-ref ops 1) numV)))) (error (quote VVQS) \""Can not divide by zero\"")) (else (compute-prim op ops)))) (else (define lhop (list-ref ops 0)) (define rhop (list-ref ops 1)) (match op ((quot...",461.0,2.0,./2234-grading/Assignment8/shuffled-39/text.rkt,0.242647,"True mutant, this forces the first branch of the cond statement, indicating that the student never tests the else, again, confusing to me how branch coverage didn't pick this up??",False
32.0,RC-match-removal,passed,/Users/charlieray/Desktop/Research/RacketCode/JCCR/./2234-grading/Assignment8/shuffled-39/text.rkt,(match e ((numC n) (quote num)) ((strC str) (quote str)) ((idC name) (type-lookup name env)) ((mutC var newVal) (quote void)) ((seqC statements) (type-check (last-element statements) env)) ((arrC vals) (define tVals (for/list : (Listof Ty) ((val vals)) (type-check val env))) (cond ((arrCheck tVals) (quote num)) (else (error (quote VVQS) value in arrC was not a num)))) ((lamC args body types) (define newBindings (for/list : (Listof TypeBinding) ((param args) (type types)) (TypeBinding param type))) (type-check body (extend-TEnv env newBindings))) ((ifC expr then else) (define thenTy (type-check then env)) (define elseTy (type-check else env)) (cond ((equal? thenTy elseTy) thenTy) (else (error (quote VVQS) else and then statements do not have matching types)))) ((appC name args) (match (type-check name env) ((funcType argsT ret) (if (paramsCheck argsT args env) ret (error (quote type-check) VVQS8 id missing from type-env)))))),(match e ((numC n) (quote num)) ((strC str) (quote str)) ((idC name) (type-lookup name env)) ((mutC var newVal) (quote void)) ((seqC statements) (type-check (last-element statements) env)) ((arrC vals) (define tVals (for/list : (Listof Ty) ((val vals)) (type-check val env))) (cond ((arrCheck tVals) (quote num)) (else (error (quote VVQS) value in arrC was not a num)))) ((ifC expr then else) (define thenTy (type-check then env)) (define elseTy (type-check else env)) (cond ((equal? thenTy elseTy) thenTy) (else (error (quote VVQS) else and then statements do not have matching types)))) ((appC name args) (match (type-check name env) ((funcType argsT ret) (if (paramsCheck argsT args env) ret (error (quote type-check) VVQS8 id missing from type-env)))))),267.0,2.0,./2234-grading/Assignment8/shuffled-39/text.rkt,,"True mutant, the lamC branch is removed in this mutant, which indicates that the students never try to type check the lamC in their test cases",False
6.0,RC-match-removal,passed,/Users/charlieray/Desktop/Research/RacketCode/JCCR/./2234-grading/Assignment8/shuffled-39/text.rkt,(match expr ((numC n) (numV n)) ((strC str) (strV str)) ((lamC args body types) (cloV args body env types)) ((arrC vals) (define iVals (for/list : (Listof Value) ((val vals)) (interp val env))) (arrV (list->vector (cast iVals (Listof Real))))) ((appC name args) (match (interp name env) ((cloV params b cenv types) (cond ((not (validate-app params args)) (error (quote VVQS) Improper argument number)) (else (define v-bindings (for/list : (Listof Binding) ((p params) (a args)) (Binding p ((inst box Value) (interp a env))))) (define benv (extend-env cenv v-bindings)) (interp b benv)))) ((primV p) (cond ((and (equal? p (quote error)) (= 1 (len-list args))) (error (quote VVQS) user-error ~e (serialize (interp (car args) env)))) ((>= 3 (len-list args)) (define argVals (for/list : (Listof Value) ((a args)) (interp a env))) (prim-check p argVals)) (else (error (quote VVQS) PrimVs take 2 arguments)))) (other (error (quote VVQS) Other values can't be applied as funcs)))) ((ifC exp then else) (define exp-int (interp exp env)) (cond ((boolV? exp-int) (cond ((boolV-b exp-int) (interp then env)) (else (interp else env)))) (else (error (quote VVQS) if exp must evaluate to a boolean)))) ((idC name) (unbox (env-lookup name env))) ((mutC var newVal) (define entry (env-lookup var env)) (define interpVal (interp newVal env)) (set-box! entry interpVal))),(match expr ((numC n) (numV n)) ((strC str) (strV str)) ((lamC args body types) (cloV args body env types)) ((arrC vals) (define iVals (for/list : (Listof Value) ((val vals)) (interp val env))) (arrV (list->vector (cast iVals (Listof Real))))) ((appC name args) (match (interp name env) ((cloV params b cenv types) (cond ((not (validate-app params args)) (error (quote VVQS) Improper argument number)) (else (define v-bindings (for/list : (Listof Binding) ((p params) (a args)) (Binding p ((inst box Value) (interp a env))))) (define benv (extend-env cenv v-bindings)) (interp b benv)))) ((primV p) (cond ((and (equal? p (quote error)) (= 1 (len-list args))) (error (quote VVQS) user-error ~e (serialize (interp (car args) env)))) ((>= 3 (len-list args)) (define argVals (for/list : (Listof Value) ((a args)) (interp a env))) (prim-check p argVals)) (else (error (quote VVQS) PrimVs take 2 arguments)))) (other (error (quote VVQS) Other values can't be applied as funcs)))) ((ifC exp then else) (define exp-int (interp exp env)) (cond ((boolV? exp-int) (cond ((boolV-b exp-int) (interp then env)) (else (interp else env)))) (else (error (quote VVQS) if exp must evaluate to a boolean)))) ((mutC var newVal) (define entry (env-lookup var env)) (define interpVal (interp newVal env)) (set-box! entry interpVal))),165.0,2.0,./2234-grading/Assignment8/shuffled-39/text.rkt,,"True mutant, the match branch for idC is removed in this mutant, which would indicate that the student's tests never pass an idC into the interpreter, and thus never lookup a variable in a box.",False
55.0,RC-match-removal,passed,/Users/charlieray/Desktop/Research/RacketCode/JCCR/./2234-grading/Assignment8/shuffled-39/text.rkt,(match s ((quote +) (numV (+ (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote *) (numV (* (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote /) (numV (/ (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote -) (numV (- (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote <=) (boolV (<= (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote str-eq?) (boolV (equal? (list-ref ops 0) (list-ref ops 1)))) ((quote num-eq?) (boolV (equal? (list-ref ops 0) (list-ref ops 1)))) ((quote arr) (define a1 (numV-n (cast (list-ref ops 0) numV))) (define a2 (numV-n (cast (list-ref ops 1) numV))) (cond ((and (integer? a1) (integer? a2)) (arrV (make-vector (cast a1 Integer) (cast a2 Integer)))))) ((quote arr-ref) (define arr (cast (car ops) arrV)) (define idx (cast (cdr ops) numV)) (cond ((integer? idx) (numV (vector-ref (arrV-vals arr) (cast idx Integer)))) (else (error (quote VVQS) Not a valid integer index)))) (other (error (quote VVQS) Not a valid primitive))),(match s ((quote +) (numV (+ (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote *) (numV (* (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote /) (numV (/ (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote -) (numV (- (numV-n (cast (list-ref ops 0) numV)) (numV-n (cast (list-ref ops 1) numV))))) ((quote str-eq?) (boolV (equal? (list-ref ops 0) (list-ref ops 1)))) ((quote num-eq?) (boolV (equal? (list-ref ops 0) (list-ref ops 1)))) ((quote arr) (define a1 (numV-n (cast (list-ref ops 0) numV))) (define a2 (numV-n (cast (list-ref ops 1) numV))) (cond ((and (integer? a1) (integer? a2)) (arrV (make-vector (cast a1 Integer) (cast a2 Integer)))))) ((quote arr-ref) (define arr (cast (car ops) arrV)) (define idx (cast (cdr ops) numV)) (cond ((integer? idx) (numV (vector-ref (arrV-vals arr) (cast idx Integer)))) (else (error (quote VVQS) Not a valid integer index)))) (other (error (quote VVQS) Not a valid primitive))),366.0,5.0,./2234-grading/Assignment8/shuffled-39/text.rkt,,"True mutant, this removed the <= branch, again similar to above I don't know how that passed branch coverage. Maybe the student branch covered this by testing for an exception, and then when the exception was raised for not having multiplication the test still passed?",False
57.0,RC-cond->true,passed,./2234-grading/Assignment4/shuffled-21/text,"(cond ((empty? funs) (error (quote VVQS) \""reference to undefined function: ~e\"" (quote main))) ((cons? funs) (if (equal? (quote main) (fdC-name (first funs))) (first funs) (get-fundef (quote main) (rest funs)))))","(cond ((empty? funs) (error (quote VVQS) \""reference to undefined function: ~e\"" (quote main))) (#t (if (equal? (quote main) (fdC-name (first funs))) (first funs) (get-fundef (quote main) (rest funs)))))",186.0,2.0,./2234-grading/Assignment4/shuffled-21/text.rkt,0.882353,"True mutant, student does not have an else branch, and also does not pass a non cons element into this",False
33.0,RC-or->false,passed,./2234-grading/Assignment4/shuffled-11/text,(or (equal? s (quote +)) (equal? s (quote *)) (equal? s (quote -)) (equal? s (quote /)) (equal? s (quote def)) (equal? s (quote leq0?))),(or (equal? s (quote +)) #f (equal? s (quote -)) (equal? s (quote /)) (equal? s (quote def)) (equal? s (quote leq0?))),149.0,8.0,./2234-grading/Assignment4/shuffled-11/text.rkt,0.742268,"True mutant, test's dont check if * is in the right ""symbol position""",False
5.0,RC-if->true,passed,/Users/charlieray/Desktop/Research/RacketCode/JCCR/./2234-grading/Assignment8/shuffled-44/text.rkt,(if (symbol=? for name) val (lookup for rest-env)),(if #t val (lookup for rest-env)),145.0,5.0,./2234-grading/Assignment8/shuffled-44/text.rkt,0.419048,"True mutant, this will just return the first value in the environment, also worth noting that replacing the condition with #f was also a mutant that survived",False
231.0,RC-cond->true,passed,./2234-grading/Assignment4/shuffled-11/text,"(cond ((and (equal? a (quote /)) (equal? (parse r) (NumC 0))) (error (quote parse) \""VVQS: Cannot Divide By Zero.\"")) ((<= (length l) 1) (error (quote parse) \""VVQS: Not correct arithmatic syntax.\"")) ((<= (length r) 1) (error (quote parse) \""VVQS: Not corre...","(cond ((and (equal? a (quote /)) (equal? (parse r) (NumC 0))) (error (quote parse) \""VVQS: Cannot Divide By Zero.\"")) ((<= (length l) 1) (error (quote parse) \""VVQS: Not correct arithmatic syntax.\"")) ((<= (length r) 1) (error (quote parse) \""VVQS: Not corre...",308.0,8.0,./2234-grading/Assignment4/shuffled-11/text.rkt,0.742268,"Equiv, uncaught else to true mutant",False
47.0,RC-if->true,passed,./2234-grading/Assignment8/shuffled-44/text,"(if (zero? b) (error \""VVQS: Division by zero\"") (NumV (/ a b)))","(if #t (error \""VVQS: Division by zero\"") (NumV (/ a b)))",379.0,11.0,./2234-grading/Assignment8/shuffled-44/text.rkt,0.696429,"True mutant, nothing will actually get divided, it will always throw an error.",False
54.0,RC-cond->true,passed,./2234-grading/Assignment8/shuffled-39/text,(cond ((null? rst) f) (else (last-element rst))),(cond (#t f) (else (last-element rst))),348.0,3.0,./2234-grading/Assignment8/shuffled-39/text.rkt,0.242647,"True mutant, this forces last element to always return the first element, which is clearly wrong. Student's test cases must never pass a vals list of more than one element",False
70.0,RC-match-removal,passed,/Users/charlieray/Desktop/Research/RacketCode/JCCR/./2234-grading/Assignment8/shuffled-39/text.rkt,(match symbols ((quote ()) #f) ((cons cur rst) (or (eq? cur s) (cmp-to-list s rst)))),(match symbols ((cons cur rst) (or (eq? cur s) (cmp-to-list s rst)))),512.0,2.0,./2234-grading/Assignment8/shuffled-39/text.rkt,,"True mutant, this removes the #f return for an empty list. ",False
143.0,RC-or->false,passed,./2234-grading/Assignment8/shuffled-04/text,(or (< (NumV-num i) 0) (>= (NumV-num i) (vector-length (ArrV-arr arr)))),(or #f (>= (NumV-num i) (vector-length (ArrV-arr arr)))),713.0,11.0,./2234-grading/Assignment8/shuffled-04/text.rkt,0.864322,"True mutant, Student's test cases never check if the index for accessing an array is less than 0",False
198.0,RC-or->false,passed,./2234-grading/Assignment4/shuffled-11/text,(or (quote +) (quote *) (quote -) (quote /)),(or (quote +) (quote *) #f (quote /)),293.0,8.0,./2234-grading/Assignment4/shuffled-11/text.rkt,0.742268,"Unkown, to be honest i have no idea what's going on here, ",False
